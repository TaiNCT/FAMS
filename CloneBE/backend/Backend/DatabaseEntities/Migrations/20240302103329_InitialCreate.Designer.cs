// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScoreManagementAPI.Context;

#nullable disable

namespace ScoreManagementAPI.Migrations
{
    [DbContext(typeof(FamsContext))]
    [Migration("20240302103329_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ScoreManagementAPI.Models.AssessmentScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssesmentSchemeId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("assesmentSchemeId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<double?>("Assignment")
                        .HasColumnType("float")
                        .HasColumnName("assignment");

                    b.Property<double?>("Final")
                        .HasColumnType("float")
                        .HasColumnName("final");

                    b.Property<double?>("FinalPractice")
                        .HasColumnType("float")
                        .HasColumnName("final_practice");

                    b.Property<double?>("FinalTheory")
                        .HasColumnType("float")
                        .HasColumnName("final_theory");

                    b.Property<double?>("Gpa")
                        .HasColumnType("float")
                        .HasColumnName("gpa");

                    b.Property<double?>("Quiz")
                        .HasColumnType("float")
                        .HasColumnName("quiz");

                    b.Property<string>("SyllabusId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("syllabus_id");

                    b.HasKey("Id")
                        .HasName("PK__Assessme__3213E83F99431233");

                    b.HasIndex("SyllabusId");

                    b.ToTable("AssessmentScheme");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("assignmentId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("AssignmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssignmentType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Assignme__3213E83F072D0988");

                    b.HasIndex("ModuleId");

                    b.HasIndex(new[] { "AssignmentId" }, "UQ__Assignme__52C21821131FFA63")
                        .IsUnique();

                    b.ToTable("Assignment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = "7e18a9ef-3723-472b-afd5-6786c4545d54",
                            AssignmentName = "Practice 1",
                            AssignmentType = 1,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2740),
                            Description = "Assignment 1 About",
                            DueDate = new DateTime(2024, 3, 6, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2736),
                            ModuleId = "6e68f0c2-d9b2-4ab7-8b3b-8fbf81a8dd40",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2742)
                        },
                        new
                        {
                            Id = 2,
                            AssignmentId = "a11e94d1-ebec-48d5-84e6-7c8589a1851f",
                            AssignmentName = "Practice 2",
                            AssignmentType = 2,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2747),
                            Description = "Assignment 2 About",
                            DueDate = new DateTime(2024, 3, 7, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2745),
                            ModuleId = "b684c89f-7b7e-4145-b345-9347a67673a3",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2748)
                        },
                        new
                        {
                            Id = 3,
                            AssignmentId = "e921a7f7-78e8-4f13-82d5-2d2b2c35ab44",
                            AssignmentName = "Practice 3",
                            AssignmentType = 3,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2750),
                            Description = "Assignment 3 About",
                            DueDate = new DateTime(2024, 3, 8, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2749),
                            ModuleId = "c485fd06-7b81-470d-a4d1-2e66e8fbd11d",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2751)
                        },
                        new
                        {
                            Id = 4,
                            AssignmentId = "3f257a47-0c8b-4b06-aa0d-487d03e83db7",
                            AssignmentName = "Practice Final",
                            AssignmentType = 3,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2754),
                            Description = "Practice Final About",
                            DueDate = new DateTime(2024, 3, 8, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2753),
                            ModuleId = "c8a4b3cc-78c5-4f20-804e-d617c35aa769",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2755)
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.AttendeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttendeeTypeId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("attendeeTypeId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("AttendeeTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Attendee__3213E83F9AB621E1");

                    b.HasIndex(new[] { "AttendeeTypeId" }, "UQ__Attendee__114FA69277F2FFD0")
                        .IsUnique();

                    b.HasIndex(new[] { "AttendeeTypeName" }, "attendee_type_unique")
                        .IsUnique();

                    b.ToTable("AttendeeType");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcceptedAttendee")
                        .HasColumnType("int");

                    b.Property<int>("ActualAttendee")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AttendeeLevelId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("classId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClassStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("FsuId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("fsu_id");

                    b.Property<string>("LocationId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("PlannedAttendee")
                        .HasColumnType("int");

                    b.Property<string>("ReviewBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SlotTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("TrainingProgramCode")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Class__3213E83F66E39C14");

                    b.HasIndex("AttendeeLevelId");

                    b.HasIndex("FsuId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TrainingProgramCode");

                    b.HasIndex(new[] { "ClassId" }, "UQ__Class__7577347F89972D9C")
                        .IsUnique();

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcceptedAttendee = 2,
                            ActualAttendee = 5,
                            ApprovedBy = "1",
                            ApprovedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2394),
                            ClassCode = "CL1",
                            ClassId = "176d899b-1c24-49fc-baf1-8755ef89f1b3",
                            ClassName = "Web Development Fundamentals",
                            ClassStatus = "Finished",
                            CreatedBy = "0",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2371),
                            Duration = 30,
                            EndDate = new DateOnly(2022, 5, 3),
                            EndTime = new TimeOnly(10, 24, 22),
                            PlannedAttendee = 10,
                            ReviewBy = "0",
                            ReviewDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2397),
                            SlotTime = "11",
                            StartDate = new DateOnly(2022, 1, 1),
                            StartTime = new TimeOnly(6, 20, 25),
                            UpdatedBy = "0",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2375)
                        },
                        new
                        {
                            Id = 2,
                            AcceptedAttendee = 2,
                            ActualAttendee = 5,
                            ApprovedBy = "1",
                            ApprovedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2418),
                            ClassCode = "CL2",
                            ClassId = "4fb5a126-7a1a-4dc5-ae48-689aa5f26464",
                            ClassName = "Advanced Web Development",
                            ClassStatus = "In class",
                            CreatedBy = "0",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2405),
                            Duration = 45,
                            EndDate = new DateOnly(2022, 12, 2),
                            EndTime = new TimeOnly(10, 24, 22),
                            PlannedAttendee = 10,
                            ReviewBy = "0",
                            ReviewDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2419),
                            SlotTime = "11",
                            StartDate = new DateOnly(2022, 2, 28),
                            StartTime = new TimeOnly(6, 20, 25),
                            UpdatedBy = "0",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2406)
                        },
                        new
                        {
                            Id = 3,
                            AcceptedAttendee = 2,
                            ActualAttendee = 5,
                            ApprovedBy = "1",
                            ApprovedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2425),
                            ClassCode = "CL3",
                            ClassId = "a5c34e23-2b1f-4ef6-80b9-78ac176d091e",
                            ClassName = "Mobile App Development Basics",
                            ClassStatus = "In class",
                            CreatedBy = "0",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2423),
                            Duration = 23,
                            EndDate = new DateOnly(2023, 6, 1),
                            EndTime = new TimeOnly(10, 24, 22),
                            PlannedAttendee = 10,
                            ReviewBy = "0",
                            ReviewDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2426),
                            SlotTime = "11",
                            StartDate = new DateOnly(2023, 3, 17),
                            StartTime = new TimeOnly(6, 20, 25),
                            UpdatedBy = "0",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2423)
                        },
                        new
                        {
                            Id = 4,
                            AcceptedAttendee = 2,
                            ActualAttendee = 5,
                            ApprovedBy = "1",
                            ApprovedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2431),
                            ClassCode = "CL4",
                            ClassId = "6bfb28e9-10c2-4a02-9755-c1fcb9a01d14",
                            ClassName = "Data Science Essentials",
                            ClassStatus = "Finished",
                            CreatedBy = "0",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2429),
                            Duration = 15,
                            EndDate = new DateOnly(2022, 11, 10),
                            EndTime = new TimeOnly(10, 24, 22),
                            PlannedAttendee = 10,
                            ReviewBy = "0",
                            ReviewDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2432),
                            SlotTime = "11",
                            StartDate = new DateOnly(2022, 5, 27),
                            StartTime = new TimeOnly(6, 20, 25),
                            UpdatedBy = "0",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2430)
                        },
                        new
                        {
                            Id = 5,
                            AcceptedAttendee = 2,
                            ActualAttendee = 5,
                            ApprovedBy = "1",
                            ApprovedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2439),
                            ClassCode = "CL5",
                            ClassId = "e4e338a8-4413-4fb6-8652-990e20c40526",
                            ClassName = "Cybersecurity Fundamentals",
                            ClassStatus = "In class",
                            CreatedBy = "0",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2437),
                            Duration = 30,
                            EndDate = new DateOnly(2022, 2, 28),
                            EndTime = new TimeOnly(10, 24, 22),
                            PlannedAttendee = 10,
                            ReviewBy = "0",
                            ReviewDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2440),
                            SlotTime = "11",
                            StartDate = new DateOnly(2022, 1, 2),
                            StartTime = new TimeOnly(6, 20, 25),
                            UpdatedBy = "0",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2437)
                        },
                        new
                        {
                            Id = 6,
                            AcceptedAttendee = 2,
                            ActualAttendee = 5,
                            ApprovedBy = "1",
                            ApprovedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2446),
                            ClassCode = "CL6",
                            ClassId = "04b2851a-5d19-4aa2-aa14-f8d68d0c90b9",
                            ClassName = "Artificial Intelligence Basics",
                            ClassStatus = "Finished",
                            CreatedBy = "0",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2442),
                            Duration = 9,
                            EndDate = new DateOnly(2012, 8, 23),
                            EndTime = new TimeOnly(10, 24, 22),
                            PlannedAttendee = 10,
                            ReviewBy = "0",
                            ReviewDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2447),
                            SlotTime = "11",
                            StartDate = new DateOnly(2022, 6, 23),
                            StartTime = new TimeOnly(6, 20, 25),
                            UpdatedBy = "0",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2443)
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.ClassUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ClassId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId", "ClassId")
                        .HasName("PK__ClassUse__0B395E3033F02159");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassUser");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.DeliveryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeliveryTypeId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("deliveryTypeId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descriptions");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Delivery__3213E83F8D2D4FDA");

                    b.HasIndex(new[] { "Name" }, "UQ__Delivery__72E12F1B533B3489")
                        .IsUnique();

                    b.HasIndex(new[] { "DeliveryTypeId" }, "UQ__Delivery__BA19297B62D4D48E")
                        .IsUnique();

                    b.ToTable("DeliveryType");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.EmailSend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSendId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("emailSendId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<int>("ReceiverType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("PK__EmailSen__3213E83FE40BAAF8");

                    b.HasIndex("SenderId");

                    b.HasIndex("TemplateId");

                    b.HasIndex(new[] { "EmailSendId" }, "UQ__EmailSen__4B3B46D7861D7F1D")
                        .IsUnique();

                    b.ToTable("EmailSend");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.EmailSendStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("EmailSendStudentId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("emailSendStudentId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("ReceiverType")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__EmailSen__3213E83FB6DC4824");

                    b.HasIndex("EmailId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex(new[] { "EmailSendStudentId" }, "UQ__EmailSen__2D96D8D698AB8010")
                        .IsUnique();

                    b.ToTable("EmailSendStudent");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTemplateId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("emailTemplateId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__EmailTem__3213E83FB94D42D0");

                    b.HasIndex(new[] { "EmailTemplateId" }, "UQ__EmailTem__C443B510FB556726")
                        .IsUnique();

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Fsu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FsuId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("fsuId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__fsu__3213E83F34FB54CF");

                    b.HasIndex(new[] { "FsuId" }, "UQ__fsu__E1FCEFCAB5A03117")
                        .IsUnique();

                    b.ToTable("fsu");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("locationId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Location__3214EC0705D631CF");

                    b.HasIndex(new[] { "LocationId" }, "UQ__Location__30646B6F40CDA6A8")
                        .IsUnique();

                    b.ToTable("Location");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MajorId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("majorId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Major__3213E83FD57C066F");

                    b.HasIndex(new[] { "Name" }, "FK_MAJOR_NAME")
                        .IsUnique();

                    b.HasIndex(new[] { "MajorId" }, "UQ__Major__A5B1B4B5AB7F7104")
                        .IsUnique();

                    b.ToTable("Major");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MajorId = "IT101",
                            Name = "Information Technology"
                        },
                        new
                        {
                            Id = 2,
                            MajorId = "AS101",
                            Name = "Applied Science"
                        },
                        new
                        {
                            Id = 3,
                            MajorId = "TC101",
                            Name = "Telecommunication"
                        },
                        new
                        {
                            Id = 4,
                            MajorId = "ER101",
                            Name = "Economy research"
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("moduleId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Module__3213E83FA0A7ABD7");

                    b.HasIndex(new[] { "ModuleId" }, "UQ__Module__8EEC8E161230F0B0")
                        .IsUnique();

                    b.ToTable("Module");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2622),
                            ModuleId = "6e68f0c2-d9b2-4ab7-8b3b-8fbf81a8dd40",
                            ModuleName = "Python programming",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2630)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 9, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2636),
                            ModuleId = "b684c89f-7b7e-4145-b345-9347a67673a3",
                            ModuleName = "C# programming",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2637)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2644),
                            ModuleId = "f74e3a7a-312f-4f80-86cb-25f7d52735bc",
                            ModuleName = "OOP Module",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2645)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 7, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2647),
                            ModuleId = "9bb0a5cb-6bf6-418b-b549-4b3d8abbebb7",
                            ModuleName = "Cyber security",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2647)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 6, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2649),
                            ModuleId = "315fd315-6764-4514-a289-569c07b91894",
                            ModuleName = "Fundamental programmng",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2650)
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 4, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2652),
                            ModuleId = "c485fd06-7b81-470d-a4d1-2e66e8fbd11d",
                            ModuleName = "Lua programming",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2653)
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 9, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2655),
                            ModuleId = "09cf6935-9c54-49c5-8a48-202268ad4f55",
                            ModuleName = "C++ programming",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2655)
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2657),
                            ModuleId = "5488d35d-0a1e-4634-898e-92dbde019029",
                            ModuleName = "Project Management",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2658)
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 2, 1, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2660),
                            ModuleId = "d067d9d4-2c4e-4dcf-85aa-30edc14263e2",
                            ModuleName = "DevOps practices",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2661)
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "Dinh The Vinh",
                            CreatedDate = new DateTime(2024, 1, 31, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2663),
                            ModuleId = "c8a4b3cc-78c5-4f20-804e-d617c35aa769",
                            ModuleName = "ASP.NET Fundamentals",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2664)
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.OutputStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descriptions");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("OutputStandardId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("outputStandardId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.HasKey("Id")
                        .HasName("PK__OutputSt__3213E83FFA1203B2");

                    b.HasIndex(new[] { "OutputStandardId" }, "UQ__OutputSt__BED5012D157BD6B3")
                        .IsUnique();

                    b.ToTable("OutputStandard");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ModuleId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("quizId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("QuizName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Quiz__3213E83F7A961CEF");

                    b.HasIndex("ModuleId");

                    b.HasIndex(new[] { "QuizId" }, "UQ__Quiz__CFF54C3C93C8AD57")
                        .IsUnique();

                    b.ToTable("Quiz");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2024, 2, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2817),
                            CreatedBy = "Dinh The Vinh",
                            ModuleId = "c485fd06-7b81-470d-a4d1-2e66e8fbd11d",
                            QuizId = "a4b6eb12-22df-4eeb-bc98-7d3f2b27b67a",
                            QuizName = "HTML",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2823)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2024, 2, 10, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2825),
                            CreatedBy = "Dinh The Vinh",
                            ModuleId = "5488d35d-0a1e-4634-898e-92dbde019029",
                            QuizId = "e1af1567-8259-4b10-91bf-0f9ff57a2a42",
                            QuizName = "CSS",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2826)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2024, 2, 9, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2828),
                            CreatedBy = "Dinh The Vinh",
                            ModuleId = "c8a4b3cc-78c5-4f20-804e-d617c35aa769",
                            QuizId = "3cfc58d0-eb6f-4725-aa63-44f065d1dbb8",
                            QuizName = "Quiz 3",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2829)
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2024, 2, 8, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2831),
                            CreatedBy = "Dinh The Vinh",
                            ModuleId = "c485fd06-7b81-470d-a4d1-2e66e8fbd11d",
                            QuizId = "f5b34985-2322-4884-9d29-3d550b2cf0a4",
                            QuizName = "Quiz 4",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2832)
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2024, 2, 7, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2833),
                            CreatedBy = "Dinh The Vinh",
                            ModuleId = "c8a4b3cc-78c5-4f20-804e-d617c35aa769",
                            QuizId = "71ac61b5-5991-4977-a9e1-38235d18b7c5",
                            QuizName = "Quiz 5",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2834)
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2024, 2, 6, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2836),
                            CreatedBy = "Dinh The Vinh",
                            ModuleId = "d067d9d4-2c4e-4dcf-85aa-30edc14263e2",
                            QuizId = "88e6f2b6-3f82-45c7-a5b9-3768b2cc2d85",
                            QuizName = "Quiz 6",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2837)
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2024, 2, 12, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2925),
                            CreatedBy = "Dinh The Vinh",
                            ModuleId = "09cf6935-9c54-49c5-8a48-202268ad4f55",
                            QuizId = "8f3d5fe2-9c61-4fd5-92b2-e3c06b7c51e7",
                            QuizName = "Quiz Final",
                            UpdatedBy = "",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2928)
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.QuizStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("QuizId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("QuizStudentId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("quizStudentId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<string>("StudentId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__QuizStud__3213E83F94DDA8EE");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("QuizStudent");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuizId = "a4b6eb12-22df-4eeb-bc98-7d3f2b27b67a",
                            QuizStudentId = "aab179ec-9467-4db9-a17e-2c7ef6405d3d",
                            Score = 23.0,
                            StudentId = "573e5801-f47e-4a82-bcb5-90fc722e4d4f",
                            SubmissionDate = new DateTime(2024, 3, 8, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3000)
                        },
                        new
                        {
                            Id = 2,
                            QuizId = "e1af1567-8259-4b10-91bf-0f9ff57a2a42",
                            QuizStudentId = "60ac2dcf-7a67-4fa5-bca3-c4e59d101fb7",
                            Score = 56.0,
                            StudentId = "97d39a95-2e4b-437f-a032-35e6357f06aa",
                            SubmissionDate = new DateTime(2024, 3, 7, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3005)
                        },
                        new
                        {
                            Id = 3,
                            QuizId = "3cfc58d0-eb6f-4725-aa63-44f065d1dbb8",
                            QuizStudentId = "a86cb2d2-0e32-4326-aa9d-5d417a96cd25",
                            Score = 82.0,
                            StudentId = "573e5801-f47e-4a82-bcb5-90fc722e4d4f",
                            SubmissionDate = new DateTime(2024, 3, 12, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3007)
                        },
                        new
                        {
                            Id = 4,
                            QuizId = "f5b34985-2322-4884-9d29-3d550b2cf0a4",
                            QuizStudentId = "71e684c2-ef11-45ad-89cb-832fd28928b3",
                            Score = 77.0,
                            StudentId = "97d39a95-2e4b-437f-a032-35e6357f06aa",
                            SubmissionDate = new DateTime(2024, 3, 7, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3013)
                        },
                        new
                        {
                            Id = 5,
                            QuizId = "71ac61b5-5991-4977-a9e1-38235d18b7c5",
                            QuizStudentId = "eba6827d-f367-41b1-88bf-414bd56fe53c",
                            Score = 52.0,
                            StudentId = "e8011711-9367-404e-b0a1-3cfa0e54f015",
                            SubmissionDate = new DateTime(2024, 3, 6, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3015)
                        },
                        new
                        {
                            Id = 6,
                            QuizId = "88e6f2b6-3f82-45c7-a5b9-3768b2cc2d85",
                            QuizStudentId = "14b7f4a6-d13e-4c87-b344-37613c46e91d",
                            Score = 63.0,
                            StudentId = "e8011711-9367-404e-b0a1-3cfa0e54f015",
                            SubmissionDate = new DateTime(2024, 3, 7, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3029)
                        },
                        new
                        {
                            Id = 7,
                            QuizId = "a4b6eb12-22df-4eeb-bc98-7d3f2b27b67a",
                            QuizStudentId = "c3b869df-1b82-4318-95f6-7b31780c107e",
                            Score = 100.0,
                            StudentId = "815dd6f4-2d41-4c6c-a032-5e78a1cf065b",
                            SubmissionDate = new DateTime(2024, 3, 15, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3030)
                        },
                        new
                        {
                            Id = 8,
                            QuizId = "e1af1567-8259-4b10-91bf-0f9ff57a2a42",
                            QuizStudentId = "6fbc7b7a-308b-4a49-bd52-99ff76a07094",
                            Score = 98.0,
                            StudentId = "39ffcf76-0db7-4f95-b1ae-3f527c8fe5a7",
                            SubmissionDate = new DateTime(2024, 3, 9, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3032)
                        },
                        new
                        {
                            Id = 9,
                            QuizId = "3cfc58d0-eb6f-4725-aa63-44f065d1dbb8",
                            QuizStudentId = "93bfb29e-4f1f-4f69-858e-92f4f6ed8ef0",
                            Score = 86.0,
                            StudentId = "815dd6f4-2d41-4c6c-a032-5e78a1cf065b",
                            SubmissionDate = new DateTime(2024, 3, 10, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3034)
                        },
                        new
                        {
                            Id = 10,
                            QuizId = "f5b34985-2322-4884-9d29-3d550b2cf0a4",
                            QuizStudentId = "314ff57a-1a7f-4dd5-9ff0-2bdcf163fc5f",
                            Score = 23.0,
                            StudentId = "39ffcf76-0db7-4f95-b1ae-3f527c8fe5a7",
                            SubmissionDate = new DateTime(2024, 3, 22, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3036)
                        },
                        new
                        {
                            Id = 11,
                            QuizId = "71ac61b5-5991-4977-a9e1-38235d18b7c5",
                            QuizStudentId = "75b01c5b-363b-4d39-b2d2-93bf41e95a4a",
                            Score = 67.0,
                            StudentId = "f3f59356-625e-47e7-9b9e-d2a8e6f2c6c6",
                            SubmissionDate = new DateTime(2024, 3, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3038)
                        },
                        new
                        {
                            Id = 12,
                            QuizId = "88e6f2b6-3f82-45c7-a5b9-3768b2cc2d85",
                            QuizStudentId = "e0c6dc55-6c79-4e2b-a1e3-38f70062d1f9",
                            Score = 34.0,
                            StudentId = "a4f15d45-0b76-4c1b-97b5-6a6b27229aae",
                            SubmissionDate = new DateTime(2024, 3, 4, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3045)
                        },
                        new
                        {
                            Id = 13,
                            QuizId = "a4b6eb12-22df-4eeb-bc98-7d3f2b27b67a",
                            QuizStudentId = "7f85e30e-2e5b-4c51-b91e-2213b0246709",
                            Score = 75.0,
                            StudentId = "d5d5c72c-6b4a-4299-bc57-29cb8120e118",
                            SubmissionDate = new DateTime(2024, 3, 7, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3048)
                        },
                        new
                        {
                            Id = 14,
                            QuizId = "e1af1567-8259-4b10-91bf-0f9ff57a2a42",
                            QuizStudentId = "2eab2e34-3454-4315-818a-c2284462b4c6",
                            Score = 99.0,
                            StudentId = "d5d5c72c-6b4a-4299-bc57-29cb8120e118",
                            SubmissionDate = new DateTime(2024, 3, 12, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3051)
                        },
                        new
                        {
                            Id = 15,
                            QuizId = "3cfc58d0-eb6f-4725-aa63-44f065d1dbb8",
                            QuizStudentId = "a2d3d344-7e50-4cb2-9ae6-d6020df012fb",
                            Score = 89.0,
                            StudentId = "f3f59356-625e-47e7-9b9e-d2a8e6f2c6c6",
                            SubmissionDate = new DateTime(2024, 3, 22, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3055)
                        },
                        new
                        {
                            Id = 16,
                            QuizId = "f5b34985-2322-4884-9d29-3d550b2cf0a4",
                            QuizStudentId = "53944115-bbb0-4eb8-b437-5eaf20b0fd1e",
                            Score = 49.0,
                            StudentId = "d269b62c-c9dc-4d8f-8b3c-602d88e72438",
                            SubmissionDate = new DateTime(2024, 3, 10, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3057)
                        },
                        new
                        {
                            Id = 17,
                            QuizId = "71ac61b5-5991-4977-a9e1-38235d18b7c5",
                            QuizStudentId = "5a39a8fc-24d3-46e0-94ed-5e8f8a3b17b7",
                            Score = 76.0,
                            StudentId = "f3f59356-625e-47e7-9b9e-d2a8e6f2c6c6",
                            SubmissionDate = new DateTime(2024, 3, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3059)
                        },
                        new
                        {
                            Id = 18,
                            QuizId = "88e6f2b6-3f82-45c7-a5b9-3768b2cc2d85",
                            QuizStudentId = "18686b3f-042b-4b13-a3c5-67b3f9a7eab0",
                            Score = 87.0,
                            StudentId = "d269b62c-c9dc-4d8f-8b3c-602d88e72438",
                            SubmissionDate = new DateTime(2024, 3, 10, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3061)
                        },
                        new
                        {
                            Id = 19,
                            QuizId = "e1af1567-8259-4b10-91bf-0f9ff57a2a42",
                            QuizStudentId = "3064c949-2940-4e61-aa94-c0e1a3927754",
                            Score = 67.0,
                            StudentId = "35f2f906-2a79-442e-b7d8-2f3f59c7c89c",
                            SubmissionDate = new DateTime(2024, 3, 25, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3063)
                        },
                        new
                        {
                            Id = 20,
                            QuizId = "3cfc58d0-eb6f-4725-aa63-44f065d1dbb8",
                            QuizStudentId = "d6b0b963-4d06-4908-b479-69c097e9295a",
                            Score = 87.0,
                            StudentId = "d269b62c-c9dc-4d8f-8b3c-602d88e72438",
                            SubmissionDate = new DateTime(2024, 3, 19, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3064)
                        },
                        new
                        {
                            Id = 21,
                            QuizId = "f5b34985-2322-4884-9d29-3d550b2cf0a4",
                            QuizStudentId = "0b504d2e-3681-4e76-9f3d-4f4a02eb98f7",
                            Score = 67.0,
                            StudentId = "35f2f906-2a79-442e-b7d8-2f3f59c7c89c",
                            SubmissionDate = new DateTime(2024, 3, 29, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3067)
                        },
                        new
                        {
                            Id = 22,
                            QuizId = "71ac61b5-5991-4977-a9e1-38235d18b7c5",
                            QuizStudentId = "4e5dd609-2a63-4cc6-aee3-ec2ff9a2c04b",
                            Score = 87.0,
                            StudentId = "a4f15d45-0b76-4c1b-97b5-6a6b27229aae",
                            SubmissionDate = new DateTime(2024, 3, 12, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3069)
                        },
                        new
                        {
                            Id = 23,
                            QuizId = "88e6f2b6-3f82-45c7-a5b9-3768b2cc2d85",
                            QuizStudentId = "e41dc6d5-8e94-4d27-8e32-409c9e09e623",
                            Score = 100.0,
                            StudentId = "573e5801-f47e-4a82-bcb5-90fc722e4d4f",
                            SubmissionDate = new DateTime(2024, 3, 14, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3071)
                        },
                        new
                        {
                            Id = 24,
                            QuizId = "a4b6eb12-22df-4eeb-bc98-7d3f2b27b67a",
                            QuizStudentId = "1c8ff533-4b5a-4870-8941-70c2fc62b63c",
                            Score = 23.0,
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            SubmissionDate = new DateTime(2024, 3, 14, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3072)
                        },
                        new
                        {
                            Id = 25,
                            QuizId = "e1af1567-8259-4b10-91bf-0f9ff57a2a42",
                            QuizStudentId = "6942c349-e742-40d1-8409-8629a9272b89",
                            Score = 53.0,
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            SubmissionDate = new DateTime(2024, 3, 5, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3074)
                        },
                        new
                        {
                            Id = 26,
                            QuizId = "3cfc58d0-eb6f-4725-aa63-44f065d1dbb8",
                            QuizStudentId = "d28a8a30-6be0-4dd1-a699-49d8a88317d2",
                            Score = 63.0,
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            SubmissionDate = new DateTime(2024, 3, 9, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3076)
                        },
                        new
                        {
                            Id = 27,
                            QuizId = "f5b34985-2322-4884-9d29-3d550b2cf0a4",
                            QuizStudentId = "8b51cb96-9917-4453-a499-f87dd63f5c81",
                            Score = 23.0,
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            SubmissionDate = new DateTime(2024, 3, 7, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3078)
                        },
                        new
                        {
                            Id = 28,
                            QuizId = "71ac61b5-5991-4977-a9e1-38235d18b7c5",
                            QuizStudentId = "f9c2aa52-50b7-4e7e-a75c-2a9f7b7479f4",
                            Score = 29.0,
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            SubmissionDate = new DateTime(2024, 3, 12, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3080)
                        },
                        new
                        {
                            Id = 29,
                            QuizId = "88e6f2b6-3f82-45c7-a5b9-3768b2cc2d85",
                            QuizStudentId = "593d26cd-1e62-4f07-9c4d-f7b7c73b109d",
                            Score = 25.0,
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            SubmissionDate = new DateTime(2024, 3, 14, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3081)
                        },
                        new
                        {
                            Id = 42,
                            QuizId = "8f3d5fe2-9c61-4fd5-92b2-e3c06b7c51e7",
                            QuizStudentId = "00042f62-ee98-4e01-b99f-f5d89aadee8c",
                            Score = 12.0,
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            SubmissionDate = new DateTime(2024, 3, 14, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3094)
                        },
                        new
                        {
                            Id = 30,
                            QuizId = "a4b6eb12-22df-4eeb-bc98-7d3f2b27b67a",
                            QuizStudentId = "4a9e7e7f-7b94-4bbd-bd7d-f95b69e4f3c5",
                            Score = 97.0,
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            SubmissionDate = new DateTime(2024, 3, 23, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3096)
                        },
                        new
                        {
                            Id = 31,
                            QuizId = "e1af1567-8259-4b10-91bf-0f9ff57a2a42",
                            QuizStudentId = "b3b8d5a9-b303-4c88-8c04-77f3a03bb87b",
                            Score = 75.0,
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            SubmissionDate = new DateTime(2024, 3, 10, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3098)
                        },
                        new
                        {
                            Id = 32,
                            QuizId = "3cfc58d0-eb6f-4725-aa63-44f065d1dbb8",
                            QuizStudentId = "0f62e8fc-2956-4d16-a6e1-4b4d51d86780",
                            Score = 54.0,
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            SubmissionDate = new DateTime(2024, 3, 8, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3100)
                        },
                        new
                        {
                            Id = 33,
                            QuizId = "f5b34985-2322-4884-9d29-3d550b2cf0a4",
                            QuizStudentId = "e79f979c-8a08-478b-a05b-4418db6f5467",
                            Score = 65.0,
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            SubmissionDate = new DateTime(2024, 3, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3101)
                        },
                        new
                        {
                            Id = 34,
                            QuizId = "71ac61b5-5991-4977-a9e1-38235d18b7c5",
                            QuizStudentId = "bcc05624-9145-4b4a-a29e-c51a02efc0f4",
                            Score = 24.0,
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            SubmissionDate = new DateTime(2024, 3, 8, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3104)
                        },
                        new
                        {
                            Id = 35,
                            QuizId = "88e6f2b6-3f82-45c7-a5b9-3768b2cc2d85",
                            QuizStudentId = "94a42f62-ee98-4e01-b99f-f5d89aadee8c",
                            Score = 12.0,
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            SubmissionDate = new DateTime(2024, 3, 14, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3106)
                        },
                        new
                        {
                            Id = 43,
                            QuizId = "8f3d5fe2-9c61-4fd5-92b2-e3c06b7c51e7",
                            QuizStudentId = "94a2af62-ee98-4e01-b99f-f5d89aadee8c",
                            Score = 12.0,
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            SubmissionDate = new DateTime(2024, 3, 14, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3108)
                        },
                        new
                        {
                            Id = 36,
                            QuizId = "a4b6eb12-22df-4eeb-bc98-7d3f2b27b67a",
                            QuizStudentId = "2ee2d5cb-bc4f-4f79-9a8d-d98df9bb98b4",
                            Score = 86.0,
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            SubmissionDate = new DateTime(2024, 3, 22, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3110)
                        },
                        new
                        {
                            Id = 37,
                            QuizId = "e1af1567-8259-4b10-91bf-0f9ff57a2a42",
                            QuizStudentId = "3d53c66f-89b3-4b92-ba41-d84d91707349",
                            Score = 10.0,
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            SubmissionDate = new DateTime(2024, 4, 1, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3112)
                        },
                        new
                        {
                            Id = 38,
                            QuizId = "3cfc58d0-eb6f-4725-aa63-44f065d1dbb8",
                            QuizStudentId = "19a7d14c-0ba0-4b85-835d-9c8a454c9c6c",
                            Score = 33.0,
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            SubmissionDate = new DateTime(2024, 3, 5, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3114)
                        },
                        new
                        {
                            Id = 39,
                            QuizId = "f5b34985-2322-4884-9d29-3d550b2cf0a4",
                            QuizStudentId = "10cc3b78-0e50-4e63-8367-f3fd2c61d7d1",
                            Score = 23.0,
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            SubmissionDate = new DateTime(2024, 3, 10, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3116)
                        },
                        new
                        {
                            Id = 40,
                            QuizId = "71ac61b5-5991-4977-a9e1-38235d18b7c5",
                            QuizStudentId = "b1421bc3-9d47-41c7-9f4b-785d65c5867a",
                            Score = 87.0,
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            SubmissionDate = new DateTime(2024, 3, 7, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3118)
                        },
                        new
                        {
                            Id = 41,
                            QuizId = "88e6f2b6-3f82-45c7-a5b9-3768b2cc2d85",
                            QuizStudentId = "c894c187-8375-4578-bb11-4b4899ff52ab",
                            Score = 53.0,
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            SubmissionDate = new DateTime(2024, 3, 18, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3120)
                        },
                        new
                        {
                            Id = 44,
                            QuizId = "8f3d5fe2-9c61-4fd5-92b2-e3c06b7c51e7",
                            QuizStudentId = "04a42f62-ee98-4e01-b99f-f5d89aadee8c",
                            Score = 12.0,
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            SubmissionDate = new DateTime(2024, 3, 14, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3122)
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.ReservedClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservedClassId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("reservedClassId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("PK__Reserved__3213E83FA15BAD05");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.HasIndex(new[] { "ReservedClassId" }, "UQ__Reserved__12EF4C50126A62C8")
                        .IsUnique();

                    b.ToTable("ReservedClass");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("roleId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Role__3213E83FBC4F9F42");

                    b.HasIndex(new[] { "RoleId" }, "UQ__Role__CD98462BD96799FB")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleName" }, "role_name_unique")
                        .IsUnique()
                        .HasFilter("[RoleName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(8425),
                            ModifiedBy = "1",
                            ModifiedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(8454),
                            RoleId = "4463c0cd-ff13-441c-8cd5-5e68961ec70b",
                            RoleName = "Administrator",
                            Title = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "2",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(8459),
                            ModifiedBy = "3",
                            ModifiedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(8460),
                            RoleId = "81e3b0e8-02f1-4f51-bb68-5b6e465a45b2",
                            RoleName = "Standard",
                            Title = "User"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "3",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(8462),
                            ModifiedBy = "3",
                            ModifiedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(8463),
                            RoleId = "e2353151-51ec-41f7-907a-fc1d60f15a6d",
                            RoleName = "Manager",
                            Title = "Manager"
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("PK__RolePerm__6400A1A826748756");

                    b.HasIndex(new[] { "RoleId" }, "UQ__RolePerm__8AFACE1B8EC32168")
                        .IsUnique();

                    b.HasIndex(new[] { "PermissionId" }, "UQ__RolePerm__EFA6FB2EE63A2F67")
                        .IsUnique();

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double?>("Score1")
                        .HasColumnType("float")
                        .HasColumnName("Score");

                    b.Property<string>("ScoreId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("scoreId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Score__3213E83F7F89EC7A");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex(new[] { "ScoreId" }, "UQ__Score__B56A0C8CE82A11F4")
                        .IsUnique();

                    b.ToTable("Score");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = "7e18a9ef-3723-472b-afd5-6786c4545d54",
                            Score1 = 12.0,
                            ScoreId = "a0b4ed42-0d4c-41cf-9b86-84b0f8e19db7",
                            StudentId = "a4f15d45-0b76-4c1b-97b5-6a6b27229aae",
                            SubmissionDate = new DateTime(2024, 3, 4, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3371)
                        },
                        new
                        {
                            Id = 2,
                            AssignmentId = "a11e94d1-ebec-48d5-84e6-7c8589a1851f",
                            Score1 = 75.0,
                            ScoreId = "1acbe9b9-6fc4-4e90-83cf-2143d10fbfd1",
                            StudentId = "f3f59356-625e-47e7-9b9e-d2a8e6f2c6c6",
                            SubmissionDate = new DateTime(2024, 3, 7, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3375)
                        },
                        new
                        {
                            Id = 3,
                            AssignmentId = "e921a7f7-78e8-4f13-82d5-2d2b2c35ab44",
                            Score1 = 66.0,
                            ScoreId = "3b3eb3b7-b755-4429-b92a-cb9c0f5198bb",
                            StudentId = "d269b62c-c9dc-4d8f-8b3c-602d88e72438",
                            SubmissionDate = new DateTime(2024, 3, 8, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3377)
                        },
                        new
                        {
                            Id = 4,
                            AssignmentId = "3f257a47-0c8b-4b06-aa0d-487d03e83db7",
                            Score1 = 96.0,
                            ScoreId = "c88edf8c-09b7-46cf-b2c1-d394d4f589c4",
                            StudentId = "815dd6f4-2d41-4c6c-a032-5e78a1cf065b",
                            SubmissionDate = new DateTime(2024, 3, 25, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3379)
                        },
                        new
                        {
                            Id = 5,
                            AssignmentId = "7e18a9ef-3723-472b-afd5-6786c4545d54",
                            Score1 = 87.0,
                            ScoreId = "2a09d83e-d639-4de8-81dd-30476b30084a",
                            StudentId = "97d39a95-2e4b-437f-a032-35e6357f06aa",
                            SubmissionDate = new DateTime(2024, 3, 14, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3382)
                        },
                        new
                        {
                            Id = 6,
                            AssignmentId = "a11e94d1-ebec-48d5-84e6-7c8589a1851f",
                            Score1 = 64.0,
                            ScoreId = "4d2db7d5-46f1-4697-a540-6b6c04384e5d",
                            StudentId = "d5d5c72c-6b4a-4299-bc57-29cb8120e118",
                            SubmissionDate = new DateTime(2024, 3, 25, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3384)
                        },
                        new
                        {
                            Id = 7,
                            AssignmentId = "e921a7f7-78e8-4f13-82d5-2d2b2c35ab44",
                            Score1 = 60.0,
                            ScoreId = "a8d318c7-1767-4345-b4cb-7e7731f19fe4",
                            StudentId = "e8011711-9367-404e-b0a1-3cfa0e54f015",
                            SubmissionDate = new DateTime(2024, 3, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3386)
                        },
                        new
                        {
                            Id = 8,
                            AssignmentId = "3f257a47-0c8b-4b06-aa0d-487d03e83db7",
                            Score1 = 90.0,
                            ScoreId = "c033f1a2-67c5-4f9e-b3f2-99cbf8034db1",
                            StudentId = "39ffcf76-0db7-4f95-b1ae-3f527c8fe5a7",
                            SubmissionDate = new DateTime(2024, 3, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3388)
                        },
                        new
                        {
                            Id = 9,
                            AssignmentId = "7e18a9ef-3723-472b-afd5-6786c4545d54",
                            Score1 = 100.0,
                            ScoreId = "2ebabf2b-5e2d-455f-b4e4-8f40cc32ad9c",
                            StudentId = "573e5801-f47e-4a82-bcb5-90fc722e4d4f",
                            SubmissionDate = new DateTime(2024, 3, 10, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3390)
                        },
                        new
                        {
                            Id = 10,
                            AssignmentId = "a11e94d1-ebec-48d5-84e6-7c8589a1851f",
                            Score1 = 87.0,
                            ScoreId = "0dc10aaf-8887-420f-b3c1-70f4987b31e2",
                            StudentId = "35f2f906-2a79-442e-b7d8-2f3f59c7c89c",
                            SubmissionDate = new DateTime(2024, 4, 1, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3392)
                        },
                        new
                        {
                            Id = 11,
                            AssignmentId = "e921a7f7-78e8-4f13-82d5-2d2b2c35ab44",
                            Score1 = 78.0,
                            ScoreId = "c4544428-1229-49fb-bbe5-c3f607f2e0b6",
                            StudentId = "e8011711-9367-404e-b0a1-3cfa0e54f015",
                            SubmissionDate = new DateTime(2024, 3, 21, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3394)
                        },
                        new
                        {
                            Id = 12,
                            AssignmentId = "3f257a47-0c8b-4b06-aa0d-487d03e83db7",
                            Score1 = 69.0,
                            ScoreId = "e2f722f0-f570-49de-a2cc-dfb6483b7276",
                            StudentId = "35f2f906-2a79-442e-b7d8-2f3f59c7c89c",
                            SubmissionDate = new DateTime(2024, 3, 18, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3396)
                        },
                        new
                        {
                            Id = 13,
                            AssignmentId = "7e18a9ef-3723-472b-afd5-6786c4545d54",
                            Score1 = 28.0,
                            ScoreId = "d36b67c8-0e0e-4873-80ec-b3fa0bfbb92c",
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            SubmissionDate = new DateTime(2024, 4, 3, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3398)
                        },
                        new
                        {
                            Id = 14,
                            AssignmentId = "a11e94d1-ebec-48d5-84e6-7c8589a1851f",
                            Score1 = 82.0,
                            ScoreId = "4a8f7f7e-ec5c-4b5b-8e52-8eae6c286e63",
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            SubmissionDate = new DateTime(2024, 3, 13, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3405)
                        },
                        new
                        {
                            Id = 15,
                            AssignmentId = "e921a7f7-78e8-4f13-82d5-2d2b2c35ab44",
                            Score1 = 92.0,
                            ScoreId = "6a5a89b8-2457-4d89-b7cb-1d255f286f47",
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            SubmissionDate = new DateTime(2024, 3, 11, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3408)
                        },
                        new
                        {
                            Id = 16,
                            AssignmentId = "3f257a47-0c8b-4b06-aa0d-487d03e83db7",
                            Score1 = 72.0,
                            ScoreId = "7e4884a4-6b2b-47e5-a982-d5c2a697309b",
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            SubmissionDate = new DateTime(2024, 3, 9, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3410)
                        },
                        new
                        {
                            Id = 17,
                            AssignmentId = "7e18a9ef-3723-472b-afd5-6786c4545d54",
                            Score1 = 77.0,
                            ScoreId = "e491e4a2-7cb5-4fe8-a6e0-5f2059eebf0f",
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            SubmissionDate = new DateTime(2024, 3, 5, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3412)
                        },
                        new
                        {
                            Id = 18,
                            AssignmentId = "a11e94d1-ebec-48d5-84e6-7c8589a1851f",
                            Score1 = 65.0,
                            ScoreId = "7ef2b3c8-1e0d-434e-b1ad-6a0b3782b8cb",
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            SubmissionDate = new DateTime(2024, 3, 3, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3413)
                        },
                        new
                        {
                            Id = 19,
                            AssignmentId = "e921a7f7-78e8-4f13-82d5-2d2b2c35ab44",
                            Score1 = 87.0,
                            ScoreId = "99e51e1c-246d-4e5d-af46-1fc605f28d8f",
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            SubmissionDate = new DateTime(2024, 3, 12, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3417)
                        },
                        new
                        {
                            Id = 20,
                            AssignmentId = "3f257a47-0c8b-4b06-aa0d-487d03e83db7",
                            Score1 = 59.0,
                            ScoreId = "e6a8b0e7-c19a-4b56-b4b7-2ec8fc6d26f5",
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            SubmissionDate = new DateTime(2024, 3, 20, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3420)
                        },
                        new
                        {
                            Id = 21,
                            AssignmentId = "7e18a9ef-3723-472b-afd5-6786c4545d54",
                            Score1 = 50.0,
                            ScoreId = "1d08c07e-8c67-4c8e-9d32-89d981f31f4b",
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            SubmissionDate = new DateTime(2024, 3, 25, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3421)
                        },
                        new
                        {
                            Id = 22,
                            AssignmentId = "a11e94d1-ebec-48d5-84e6-7c8589a1851f",
                            Score1 = 23.0,
                            ScoreId = "60be68a2-b3fd-44b0-a187-d2b11b1d23d7",
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            SubmissionDate = new DateTime(2024, 3, 3, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3423)
                        },
                        new
                        {
                            Id = 23,
                            AssignmentId = "e921a7f7-78e8-4f13-82d5-2d2b2c35ab44",
                            Score1 = 34.0,
                            ScoreId = "1b33f1d4-1ac4-492d-aa3e-b086de84dab1",
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            SubmissionDate = new DateTime(2024, 3, 9, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3425)
                        },
                        new
                        {
                            Id = 24,
                            AssignmentId = "3f257a47-0c8b-4b06-aa0d-487d03e83db7",
                            Score1 = 45.0,
                            ScoreId = "f0f23e62-9a67-4a85-83ff-d8a5b2f83dd4",
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            SubmissionDate = new DateTime(2024, 3, 8, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(3428)
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Audit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CertificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CertificationStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faaccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FAAccount");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("Gpa")
                        .HasColumnType("float")
                        .HasColumnName("GPA");

                    b.Property<DateTime>("GraduatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MajorId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("Mock")
                        .HasColumnType("float");

                    b.Property<string>("MutatableStudentID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RECer");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("studentId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("University")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Student__3213E83F3485C51E");

                    b.HasIndex("MajorId");

                    b.HasIndex("MutatableStudentID")
                        .IsUnique();

                    b.HasIndex(new[] { "StudentId" }, "UQ__Student__4D11D63D5926E8B3")
                        .IsUnique();

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "{\"permanent_res\":\"Vietnam, Ho Chi Minh city\",\"location\":\"Ho Chi Minh city\"}",
                            Area = "Ho Chi Minh",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(54),
                            Email = "vinh@fpt.edu.vn",
                            Faaccount = "DTVinh12223",
                            FullName = "Đinh Thế Vinh",
                            Gender = 1,
                            Gpa = 88.0,
                            GraduatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(60),
                            JoinedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(61),
                            MajorId = "IT101",
                            Mock = 0.0,
                            MutatableStudentID = "STD48106",
                            Phone = "111-232-1312",
                            Recer = "Ho Hai Quang",
                            Status = false,
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975",
                            Type = 11,
                            University = "Greenwich"
                        },
                        new
                        {
                            Id = 2,
                            Address = "{\"permanent_res\":\"Vietnam, Ho Chi Minh city\",\"location\":\"Ho Chi Minh city\"}",
                            Area = "Ho Chi Minh city",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(172),
                            Email = "v122@fpt.edu.vn",
                            Faaccount = "HHSon2k1",
                            FullName = "Hoàng Hải Sơn",
                            Gender = 1,
                            Gpa = 22.0,
                            GraduatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(174),
                            JoinedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(205),
                            MajorId = "AS101",
                            Mock = 0.0,
                            MutatableStudentID = "STD54205",
                            Phone = "111-111-123",
                            Recer = "Tran Tat Nghia",
                            Status = false,
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50",
                            Type = 23,
                            University = "FPT"
                        },
                        new
                        {
                            Id = 3,
                            Address = "{\"permanent_res\":\"Vietnam, Ha Noi\",\"location\":\"Ha Noi\"}",
                            Area = "Da Nang",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(350),
                            Email = "add112@fpt.edu.vn",
                            Faaccount = "DungNQ111",
                            FullName = "Nguyễn Quang Dũng",
                            Gender = 1,
                            Gpa = 12.0,
                            GraduatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(352),
                            JoinedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(354),
                            MajorId = "TC101",
                            Mock = 0.0,
                            MutatableStudentID = "STD29883",
                            Phone = "111-111-33",
                            Recer = "Nguyen Quang Dung",
                            Status = false,
                            StudentId = "ea21b42d-89a2-4e9e-a6b6-d6a9c7b52480",
                            Type = 41,
                            University = "RMIT"
                        },
                        new
                        {
                            Id = 4,
                            Address = "{\"permanent_res\":\"United States\",\"location\":\"New York\"}",
                            Area = "Da Nang",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(409),
                            Email = "camecam@fpt.edu.vn",
                            Faaccount = "CarmOD1k9",
                            FullName = "Carmila Odesn",
                            Gender = 1,
                            Gpa = 32.0,
                            GraduatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(411),
                            JoinedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(411),
                            MajorId = "TC101",
                            Mock = 0.0,
                            MutatableStudentID = "STD84474",
                            Phone = "111-111-2411",
                            Recer = "Ho Hai Quang",
                            Status = true,
                            StudentId = "3dc8f1f1-0a7a-4db4-91c3-98b93ec1b2a3",
                            Type = 2,
                            University = "Hutech"
                        },
                        new
                        {
                            Id = 5,
                            Address = "{\"permanent_res\":\"Finland\",\"location\":\"Tampere\"}",
                            Area = "Hue",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(477),
                            Email = "hestamp@fpt.edu.vn",
                            Faaccount = "HelT112",
                            FullName = "Helsinji Tampe",
                            Gender = 1,
                            Gpa = 88.0,
                            GraduatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(479),
                            JoinedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(480),
                            MajorId = "AS101",
                            Mock = 0.0,
                            MutatableStudentID = "STD95373",
                            Phone = "111-111-2411",
                            Recer = "Tran Tat Nghia",
                            Status = false,
                            StudentId = "97d39a95-2e4b-437f-a032-35e6357f06aa",
                            Type = 22,
                            University = "Tampere"
                        },
                        new
                        {
                            Id = 6,
                            Address = "{\"permanent_res\":\"Finland\",\"location\":\"Helsinki\"}",
                            Area = "Helsinki",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2000, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "example1@example.com",
                            Faaccount = "example1",
                            FullName = "John Doe",
                            Gender = 0,
                            Gpa = 75.0,
                            GraduatedDate = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JoinedDate = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MajorId = "AS101",
                            Mock = 0.0,
                            MutatableStudentID = "STD57408",
                            Phone = "123-456-7890",
                            Recer = "Alice Johnson",
                            Status = true,
                            StudentId = "35f2f906-2a79-442e-b7d8-2f3f59c7c89c",
                            Type = 18,
                            University = "Helsinki"
                        },
                        new
                        {
                            Id = 7,
                            Address = "{\"permanent_res\":\"Finland\",\"location\":\"Turku\"}",
                            Area = "Turku",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2001, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "example2@example.com",
                            Faaccount = "example2",
                            FullName = "Jane Smith",
                            Gender = 1,
                            Gpa = 92.0,
                            GraduatedDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JoinedDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MajorId = "ER101",
                            Mock = 0.0,
                            MutatableStudentID = "STD54325",
                            Phone = "987-654-3210",
                            Recer = "Bob Anderson",
                            Status = false,
                            StudentId = "d269b62c-c9dc-4d8f-8b3c-602d88e72438",
                            Type = 20,
                            University = "Turku"
                        },
                        new
                        {
                            Id = 8,
                            Address = "{\"permanent_res\":\"Finland\",\"location\":\"Oulu\"}",
                            Area = "Oulu",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(1999, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "example3@example.com",
                            Faaccount = "example3",
                            FullName = "Emma Johnson",
                            Gender = 0,
                            Gpa = 85.0,
                            GraduatedDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JoinedDate = new DateTime(2019, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MajorId = "AS101",
                            Mock = 0.0,
                            MutatableStudentID = "STD20273",
                            Phone = "456-789-0123",
                            Recer = "David Williams",
                            Status = true,
                            StudentId = "f3f59356-625e-47e7-9b9e-d2a8e6f2c6c6",
                            Type = 21,
                            University = "Oulu"
                        },
                        new
                        {
                            Id = 9,
                            Address = "{\"permanent_res\":\"Finland\",\"location\":\"Vaasa\"}",
                            Area = "Vaasa",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2002, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "example4@example.com",
                            Faaccount = "example4",
                            FullName = "Michael Brown",
                            Gender = 1,
                            Gpa = 68.0,
                            GraduatedDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JoinedDate = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MajorId = "ER101",
                            Mock = 0.0,
                            MutatableStudentID = "STD04045",
                            Phone = "789-012-3456",
                            Recer = "Emily Garcia",
                            Status = false,
                            StudentId = "d5d5c72c-6b4a-4299-bc57-29cb8120e118",
                            Type = 19,
                            University = "Vaasa"
                        },
                        new
                        {
                            Id = 10,
                            Address = "{\"permanent_res\":\"Finland\",\"location\":\"Tampere\"}",
                            Area = "Tampere",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(1258),
                            Email = "hestamp@fpt.edu.vn",
                            Faaccount = "HelT112",
                            FullName = "Helsinji Tampe",
                            Gender = 1,
                            Gpa = 88.0,
                            GraduatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(1261),
                            JoinedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(1261),
                            MajorId = "TC101",
                            Mock = 0.0,
                            MutatableStudentID = "STD99471",
                            Phone = "111-111-2411",
                            Recer = "Tran Tat Nghia",
                            Status = false,
                            StudentId = "e8011711-9367-404e-b0a1-3cfa0e54f015",
                            Type = 22,
                            University = "Tampere"
                        },
                        new
                        {
                            Id = 11,
                            Address = "{\"permanent_res\":\"Finland\",\"location\":\"Espoo\"}",
                            Area = "Espoo",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2003, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "example6@example.com",
                            Faaccount = "example6",
                            FullName = "Olivia Miller",
                            Gender = 0,
                            Gpa = 81.0,
                            GraduatedDate = new DateTime(2026, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JoinedDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MajorId = "AS101",
                            Mock = 0.0,
                            MutatableStudentID = "STD39108",
                            Phone = "555-555-5555",
                            Recer = "Daniel Moore",
                            Status = true,
                            StudentId = "a4f15d45-0b76-4c1b-97b5-6a6b27229aae",
                            Type = 23,
                            University = "Espoo"
                        },
                        new
                        {
                            Id = 12,
                            Address = "{\"permanent_res\":\"Finland\",\"location\":\"Jyväskylä\"}",
                            Area = "Jyväskylä",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2004, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "example7@example.com",
                            Faaccount = "example7",
                            FullName = "William Wilson",
                            Gender = 1,
                            Gpa = 95.0,
                            GraduatedDate = new DateTime(2027, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JoinedDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MajorId = "TC101",
                            Mock = 0.0,
                            MutatableStudentID = "STD62345",
                            Phone = "222-222-2222",
                            Recer = "Sophia Taylor",
                            Status = false,
                            StudentId = "815dd6f4-2d41-4c6c-a032-5e78a1cf065b",
                            Type = 24,
                            University = "Jyväskylä"
                        },
                        new
                        {
                            Id = 13,
                            Address = "{\"permanent_res\":\"Finland\",\"location\":\"Kuopio\"}",
                            Area = "Kuopio",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2005, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "example8@example.com",
                            Faaccount = "example8",
                            FullName = "Liam Brown",
                            Gender = 1,
                            Gpa = 72.0,
                            GraduatedDate = new DateTime(2028, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JoinedDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MajorId = "IT101",
                            Mock = 0.0,
                            MutatableStudentID = "STD67503",
                            Phone = "333-333-3333",
                            Recer = "Mia Clark",
                            Status = true,
                            StudentId = "573e5801-f47e-4a82-bcb5-90fc722e4d4f",
                            Type = 25,
                            University = "Kuopio"
                        },
                        new
                        {
                            Id = 14,
                            Address = "{\"permanent_res\":\"Finland\",\"location\":\"Rovaniemi\"}",
                            Area = "Rovaniemi",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2006, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "example9@example.com",
                            Faaccount = "example9",
                            FullName = "Noah Anderson",
                            Gender = 1,
                            Gpa = 88.0,
                            GraduatedDate = new DateTime(2029, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JoinedDate = new DateTime(2026, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MajorId = "IT101",
                            Mock = 0.0,
                            MutatableStudentID = "STD27827",
                            Phone = "444-444-4444",
                            Recer = "Ethan Adams",
                            Status = false,
                            StudentId = "39ffcf76-0db7-4f95-b1ae-3f527c8fe5a7",
                            Type = 26,
                            University = "Rovaniemi"
                        },
                        new
                        {
                            Id = 15,
                            Address = "{\"permanent_res\":\"Finland\",\"location\":\"Lahti\"}",
                            Area = "Lahti",
                            Audit = 0,
                            CertificationStatus = false,
                            Dob = new DateTime(2007, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "example10@example.com",
                            Faaccount = "example10",
                            FullName = "Sophia Wilson",
                            Gender = 0,
                            Gpa = 79.0,
                            GraduatedDate = new DateTime(2030, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JoinedDate = new DateTime(2027, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MajorId = "TC101",
                            Mock = 0.0,
                            MutatableStudentID = "STD28457",
                            Phone = "666-666-6666",
                            Recer = "Logan Baker",
                            Status = true,
                            StudentId = "b739b16a-24eb-49bb-b57a-86f8c3c9c2fc",
                            Type = 27,
                            University = "Lahti"
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.StudentClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendingStatus")
                        .HasColumnType("int");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<double>("FinalScore")
                        .HasColumnType("float");

                    b.Property<int>("Gpalevel")
                        .HasColumnType("int")
                        .HasColumnName("GPALevel");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<string>("StudentClassId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("studentClassId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("PK__StudentC__3213E83F0B5F7B86");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.HasIndex(new[] { "StudentClassId" }, "UQ__StudentC__114B9902B8A9BF95")
                        .IsUnique();

                    b.ToTable("StudentClass");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttendingStatus = 3,
                            ClassId = "04b2851a-5d19-4aa2-aa14-f8d68d0c90b9",
                            FinalScore = 55.0,
                            Gpalevel = 3,
                            Method = 3,
                            Result = 10,
                            StudentClassId = "2f1e6d1d-7a0a-4b42-b4d1-25f0e7b4a4f1",
                            StudentId = "815dd6f4-2d41-4c6c-a032-5e78a1cf065b"
                        },
                        new
                        {
                            Id = 2,
                            AttendingStatus = 3,
                            ClassId = "e4e338a8-4413-4fb6-8652-990e20c40526",
                            FinalScore = 35.0,
                            Gpalevel = 3,
                            Method = 1,
                            Result = 92,
                            StudentClassId = "d32f4d16-78d6-4fe1-89d2-9653c8b12c6d",
                            StudentId = "35f2f906-2a79-442e-b7d8-2f3f59c7c89c"
                        },
                        new
                        {
                            Id = 3,
                            AttendingStatus = 2,
                            ClassId = "04b2851a-5d19-4aa2-aa14-f8d68d0c90b9",
                            FinalScore = 78.0,
                            Gpalevel = 1,
                            Method = 2,
                            Result = 80,
                            StudentClassId = "9ae7ec99-1ee5-4a61-b2ff-308b14f2bb38",
                            StudentId = "815dd6f4-2d41-4c6c-a032-5e78a1cf065b"
                        },
                        new
                        {
                            Id = 4,
                            AttendingStatus = 1,
                            ClassId = "6bfb28e9-10c2-4a02-9755-c1fcb9a01d14",
                            FinalScore = 85.0,
                            Gpalevel = 2,
                            Method = 2,
                            Result = 23,
                            StudentClassId = "c7e1f7c5-615e-4328-8e4f-77a70c57fd52",
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50"
                        },
                        new
                        {
                            Id = 5,
                            AttendingStatus = 3,
                            ClassId = "6bfb28e9-10c2-4a02-9755-c1fcb9a01d14",
                            FinalScore = 92.0,
                            Gpalevel = 3,
                            Method = 1,
                            Result = 5,
                            StudentClassId = "b23a6a23-b8eb-4ec6-bd34-c3e11b446441",
                            StudentId = "f3f59356-625e-47e7-9b9e-d2a8e6f2c6c6"
                        },
                        new
                        {
                            Id = 6,
                            AttendingStatus = 2,
                            ClassId = "176d899b-1c24-49fc-baf1-8755ef89f1b3",
                            FinalScore = 70.0,
                            Gpalevel = 1,
                            Method = 2,
                            Result = 18,
                            StudentClassId = "5a9e7fd7-d49e-4c5b-946b-dac02ac8565d",
                            StudentId = "cd9fe541-1c6f-4e9e-a94b-1ff748186975"
                        },
                        new
                        {
                            Id = 7,
                            AttendingStatus = 1,
                            ClassId = "176d899b-1c24-49fc-baf1-8755ef89f1b3",
                            FinalScore = 63.0,
                            Gpalevel = 2,
                            Method = 3,
                            Result = 63,
                            StudentClassId = "87acbe6a-7bcb-4c59-ba27-7f62421709f9",
                            StudentId = "7a3e4b3c-5201-45fc-bb7d-18ab7e26cc50"
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.StudentModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("ModuleLevel")
                        .HasColumnType("int");

                    b.Property<double>("ModuleScore")
                        .HasColumnType("float");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("StudentModuleId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("studentModuleId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.HasKey("Id")
                        .HasName("PK__StudentM__3213E83F5FFC8BAB");

                    b.HasIndex("ModuleId");

                    b.HasIndex("StudentId");

                    b.HasIndex(new[] { "StudentModuleId" }, "UQ__StudentM__4A54FA662D560FFE")
                        .IsUnique();

                    b.ToTable("StudentModule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ModuleId = "6e68f0c2-d9b2-4ab7-8b3b-8fbf81a8dd40",
                            ModuleLevel = 1,
                            ModuleScore = 22.0,
                            StudentId = "35f2f906-2a79-442e-b7d8-2f3f59c7c89c",
                            StudentModuleId = "977aef17-9c24-48e8-83a4-d55e5fc0e319"
                        },
                        new
                        {
                            Id = 2,
                            ModuleId = "b684c89f-7b7e-4145-b345-9347a67673a3",
                            ModuleLevel = 2,
                            ModuleScore = 42.0,
                            StudentId = "d5d5c72c-6b4a-4299-bc57-29cb8120e118",
                            StudentModuleId = "e426c7e7-05e0-4798-8cf9-8ec2bc18d2d4"
                        },
                        new
                        {
                            Id = 3,
                            ModuleId = "6e68f0c2-d9b2-4ab7-8b3b-8fbf81a8dd40",
                            ModuleLevel = 1,
                            ModuleScore = 52.0,
                            StudentId = "39ffcf76-0db7-4f95-b1ae-3f527c8fe5a7",
                            StudentModuleId = "8b2a69f2-625b-4749-afe5-5a2a60f3cb53"
                        },
                        new
                        {
                            Id = 4,
                            ModuleId = "b684c89f-7b7e-4145-b345-9347a67673a3",
                            ModuleLevel = 3,
                            ModuleScore = 22.0,
                            StudentId = "d5d5c72c-6b4a-4299-bc57-29cb8120e118",
                            StudentModuleId = "b1446b4c-3b57-4dbf-a94f-6f29e2d33a9e"
                        },
                        new
                        {
                            Id = 5,
                            ModuleId = "f74e3a7a-312f-4f80-86cb-25f7d52735bc",
                            ModuleLevel = 1,
                            ModuleScore = 24.0,
                            StudentId = "39ffcf76-0db7-4f95-b1ae-3f527c8fe5a7",
                            StudentModuleId = "9ae1e7c4-459b-4155-9a28-c5ad8fbdb1f6"
                        },
                        new
                        {
                            Id = 6,
                            ModuleId = "f74e3a7a-312f-4f80-86cb-25f7d52735bc",
                            ModuleLevel = 3,
                            ModuleScore = 72.0,
                            StudentId = "35f2f906-2a79-442e-b7d8-2f3f59c7c89c",
                            StudentModuleId = "70d26e2f-b330-4e97-b2d2-d3be9ec0ac0b"
                        },
                        new
                        {
                            Id = 7,
                            ModuleId = "5488d35d-0a1e-4634-898e-92dbde019029",
                            ModuleLevel = 2,
                            ModuleScore = 22.0,
                            StudentId = "a4f15d45-0b76-4c1b-97b5-6a6b27229aae",
                            StudentModuleId = "c20d89a0-8d3f-43c3-b9d1-8764ebd6f5a5"
                        },
                        new
                        {
                            Id = 8,
                            ModuleId = "5488d35d-0a1e-4634-898e-92dbde019029",
                            ModuleLevel = 3,
                            ModuleScore = 92.0,
                            StudentId = "e8011711-9367-404e-b0a1-3cfa0e54f015",
                            StudentModuleId = "f145ac5c-49d2-44b2-a6c7-86a4bc855de5"
                        },
                        new
                        {
                            Id = 9,
                            ModuleId = "9bb0a5cb-6bf6-418b-b549-4b3d8abbebb7",
                            ModuleLevel = 1,
                            ModuleScore = 65.0,
                            StudentId = "a4f15d45-0b76-4c1b-97b5-6a6b27229aae",
                            StudentModuleId = "87225985-9f69-4fc7-9c54-8ec93b8e7021"
                        },
                        new
                        {
                            Id = 10,
                            ModuleId = "9bb0a5cb-6bf6-418b-b549-4b3d8abbebb7",
                            ModuleLevel = 2,
                            ModuleScore = 22.0,
                            StudentId = "e8011711-9367-404e-b0a1-3cfa0e54f015",
                            StudentModuleId = "c45f8b95-2c59-4e32-a2a2-29ecabe9e2cf"
                        },
                        new
                        {
                            Id = 11,
                            ModuleId = "315fd315-6764-4514-a289-569c07b91894",
                            ModuleLevel = 2,
                            ModuleScore = 44.0,
                            StudentId = "815dd6f4-2d41-4c6c-a032-5e78a1cf065b",
                            StudentModuleId = "2e5ef0f0-9a09-470b-87f5-c58f831bcf56"
                        },
                        new
                        {
                            Id = 12,
                            ModuleId = "315fd315-6764-4514-a289-569c07b91894",
                            ModuleLevel = 3,
                            ModuleScore = 34.0,
                            StudentId = "815dd6f4-2d41-4c6c-a032-5e78a1cf065b",
                            StudentModuleId = "c9a1865c-bbf1-47d6-bd4e-4be5f1ee9e92"
                        },
                        new
                        {
                            Id = 13,
                            ModuleId = "c485fd06-7b81-470d-a4d1-2e66e8fbd11d",
                            ModuleLevel = 1,
                            ModuleScore = 23.0,
                            StudentId = "573e5801-f47e-4a82-bcb5-90fc722e4d4f",
                            StudentModuleId = "76b04144-1a4b-4c9e-af23-b6e494a621d2"
                        },
                        new
                        {
                            Id = 14,
                            ModuleId = "d067d9d4-2c4e-4dcf-85aa-30edc14263e2",
                            ModuleLevel = 3,
                            ModuleScore = 22.0,
                            StudentId = "f3f59356-625e-47e7-9b9e-d2a8e6f2c6c6",
                            StudentModuleId = "598a4f03-f9c8-4b4c-9fb7-2eb5b9941b3a"
                        },
                        new
                        {
                            Id = 15,
                            ModuleId = "c8a4b3cc-78c5-4f20-804e-d617c35aa769",
                            ModuleLevel = 1,
                            ModuleScore = 74.0,
                            StudentId = "f3f59356-625e-47e7-9b9e-d2a8e6f2c6c6",
                            StudentModuleId = "2c350499-b099-4d9a-a52b-4a77d8e31579"
                        },
                        new
                        {
                            Id = 16,
                            ModuleId = "09cf6935-9c54-49c5-8a48-202268ad4f55",
                            ModuleLevel = 2,
                            ModuleScore = 93.0,
                            StudentId = "573e5801-f47e-4a82-bcb5-90fc722e4d4f",
                            StudentModuleId = "3d97c81b-6e05-4d56-855b-8f570e1f88b4"
                        },
                        new
                        {
                            Id = 17,
                            ModuleId = "d067d9d4-2c4e-4dcf-85aa-30edc14263e2",
                            ModuleLevel = 3,
                            ModuleScore = 84.0,
                            StudentId = "d269b62c-c9dc-4d8f-8b3c-602d88e72438",
                            StudentModuleId = "b20933f4-f19c-4b65-bec7-48b9bcb105d8"
                        },
                        new
                        {
                            Id = 18,
                            ModuleId = "c485fd06-7b81-470d-a4d1-2e66e8fbd11d",
                            ModuleLevel = 2,
                            ModuleScore = 77.0,
                            StudentId = "d269b62c-c9dc-4d8f-8b3c-602d88e72438",
                            StudentModuleId = "61be548f-67f2-4fd3-a717-7bc97d3b84dc"
                        },
                        new
                        {
                            Id = 19,
                            ModuleId = "09cf6935-9c54-49c5-8a48-202268ad4f55",
                            ModuleLevel = 2,
                            ModuleScore = 65.0,
                            StudentId = "97d39a95-2e4b-437f-a032-35e6357f06aa",
                            StudentModuleId = "7e904f7f-34a4-43e2-b5b1-36a3e50f15d8"
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Syllabus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttendeeNumber")
                        .HasColumnType("int")
                        .HasColumnName("attendee_number");

                    b.Property<string>("CourseObjective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("course_objective");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int?>("Days")
                        .HasColumnType("int")
                        .HasColumnName("days");

                    b.Property<byte[]>("DeliveryPrinciple")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("delivery_principle");

                    b.Property<double?>("Hours")
                        .HasColumnType("float")
                        .HasColumnName("hours");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("level");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("SyllabusId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("syllabusId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("TechnicalRequirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("technical_requirement");

                    b.Property<string>("TopicCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("topic_code");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("topic_name");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("PK__Syllabus__3213E83FEE2C76F8");

                    b.HasIndex(new[] { "SyllabusId" }, "UQ__Syllabus__915EDF816714E22A")
                        .IsUnique();

                    b.HasIndex(new[] { "TopicCode" }, "topic_code_unique")
                        .IsUnique();

                    b.ToTable("Syllabus");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.SyllabusDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int?>("DayNo")
                        .HasColumnType("int")
                        .HasColumnName("day_no");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("SyllabusDayId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("syllabusDayId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("SyllabusId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("syllabus_id");

                    b.HasKey("Id")
                        .HasName("PK__Syllabus__3213E83F0C4B4C1A");

                    b.HasIndex("SyllabusId");

                    b.HasIndex(new[] { "SyllabusDayId" }, "UQ__Syllabus__6F1A1381B348F5E2")
                        .IsUnique();

                    b.ToTable("SyllabusDay");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.SyllabusUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("SyllabusDayId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("syllabus_day_id");

                    b.Property<string>("SyllabusUnitId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("syllabusUnitId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<int>("UnitNo")
                        .HasColumnType("int")
                        .HasColumnName("unit_no");

                    b.HasKey("Id")
                        .HasName("PK__Syllabus__3213E83FFC642C5B");

                    b.HasIndex("SyllabusDayId");

                    b.HasIndex(new[] { "SyllabusUnitId" }, "UQ__Syllabus__D5A44901F7DFBD8C")
                        .IsUnique();

                    b.ToTable("SyllabusUnit");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.TechnicalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TechnicalCodeId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("technicalCodeId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("TechnicalCodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Technica__3213E83FB58F0454");

                    b.HasIndex(new[] { "TechnicalCodeId" }, "UQ__Technica__7E6FA295A17DDB44")
                        .IsUnique();

                    b.HasIndex(new[] { "TechnicalCodeName" }, "technical_code_unique_name")
                        .IsUnique();

                    b.ToTable("TechnicalCode");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Technical 1",
                            TechnicalCodeId = "7a9b5e84-1a8c-4e57-bfc7-23dcb6d78e92",
                            TechnicalCodeName = "TECH1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Technical 2",
                            TechnicalCodeId = "4f58ebf5-79d8-4fb9-bd7b-12119bfa3171",
                            TechnicalCodeName = "TECH2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Technical 3",
                            TechnicalCodeId = "ac2a35a0-c9d7-4a19-b1d4-0f0e6c1f14c7",
                            TechnicalCodeName = "TECH3"
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.TechnicalGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TechnicalGroupId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("technicalGroupId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("TechnicalGroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Technica__3213E83FC70FAB2F");

                    b.HasIndex(new[] { "TechnicalGroupName" }, "TechnicalGroupNameUnique")
                        .IsUnique();

                    b.HasIndex(new[] { "TechnicalGroupId" }, "UQ__Technica__07542F35393FF8C5")
                        .IsUnique();

                    b.ToTable("TechnicalGroup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Group1",
                            TechnicalGroupId = "e792ad2b-9d75-46f3-a1f0-eb3184372f92",
                            TechnicalGroupName = "GRTECH1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Group2",
                            TechnicalGroupId = "3fc26468-3fd0-49ff-bde4-0b2484aa3c3f",
                            TechnicalGroupName = "GRTECH2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Group3",
                            TechnicalGroupId = "b9358a53-d1c1-4d3d-8f22-1e75a8a9a6d8",
                            TechnicalGroupName = "GRTECH3"
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.TrainingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("file_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsFile")
                        .HasColumnType("bit")
                        .HasColumnName("is_file");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("TrainingMaterialId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("trainingMaterialId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("UnitChapterId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("unit_chapter_id");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("PK__Training__3213E83F67DDB0F7");

                    b.HasIndex("UnitChapterId");

                    b.HasIndex(new[] { "TrainingMaterialId" }, "UQ__Training__E3CB00D617BDF3BA")
                        .IsUnique();

                    b.ToTable("TrainingMaterial");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<int?>("Hours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TechnicalCodeId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TechnicalGroupId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TrainingProgramCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("PK__Training__3213E83F0C3B8760");

                    b.HasIndex("TechnicalCodeId");

                    b.HasIndex("TechnicalGroupId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TrainingProgramCode" }, "UQ__Training__8245E6A3E1041402")
                        .IsUnique();

                    b.ToTable("TrainingProgram");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2135),
                            Days = 10,
                            Hours = 10,
                            Name = "Introduction to SQL",
                            StartTime = new TimeOnly(10, 30, 15),
                            Status = "Done",
                            TechnicalCodeId = "7a9b5e84-1a8c-4e57-bfc7-23dcb6d78e92",
                            TechnicalGroupId = "e792ad2b-9d75-46f3-a1f0-eb3184372f92",
                            TrainingProgramCode = "b26cfe3f-6d6c-4d24-afe0-12e21715b042",
                            UpdatedBy = "0",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2141),
                            UserId = "4463c0cdff13441c8cd55e68961ec70b"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "0",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2145),
                            Name = "Advanced Data Analysis",
                            StartTime = new TimeOnly(12, 17, 5),
                            Status = "Not yet",
                            TechnicalCodeId = "4f58ebf5-79d8-4fb9-bd7b-12119bfa3171",
                            TechnicalGroupId = "3fc26468-3fd0-49ff-bde4-0b2484aa3c3f",
                            TrainingProgramCode = "8c06310b-4d44-4e0e-a7a0-b84d09ccfc3a",
                            UpdatedBy = "0",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2146),
                            UserId = "e235315151ec41f7907afc1d60f15a6d"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "0",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2152),
                            Name = "Python Fundamentals",
                            StartTime = new TimeOnly(6, 20, 25),
                            Status = "Done",
                            TechnicalCodeId = "ac2a35a0-c9d7-4a19-b1d4-0f0e6c1f14c7",
                            TechnicalGroupId = "b9358a53-d1c1-4d3d-8f22-1e75a8a9a6d8",
                            TrainingProgramCode = "1f749079-2a92-4f32-aa0b-8391a028cfe4",
                            UpdatedBy = "0",
                            UpdatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 904, DateTimeKind.Local).AddTicks(2153),
                            UserId = "a3db3e4e0f25445282b2e61a32c582a4"
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.TrainingProgramModule", b =>
                {
                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ProgramId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasIndex("ModuleId");

                    b.HasIndex(new[] { "ProgramId" }, "UQ__Training__75256059DAC2224B")
                        .IsUnique();

                    b.ToTable("TrainingProgramModule");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.UnitChapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterNo")
                        .HasColumnType("int")
                        .HasColumnName("chapter_no");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("DeliveryTypeId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("delivery_type_id");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit")
                        .HasColumnName("is_online");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("OutputStandardId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("output_standard_id");

                    b.Property<string>("SyllabusUnitId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("syllabus_unit_id");

                    b.Property<string>("UnitChapterId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("unitChapterId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.HasKey("Id")
                        .HasName("PK__UnitChap__3213E83F0C4B84C3");

                    b.HasIndex("DeliveryTypeId");

                    b.HasIndex("OutputStandardId");

                    b.HasIndex("SyllabusUnitId");

                    b.HasIndex(new[] { "UnitChapterId" }, "UQ__UnitChap__A4B0833CB0354546")
                        .IsUnique();

                    b.ToTable("UnitChapter");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("userId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__User__3213E83F01BD641D");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "EmailUnique")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "UQ__User__CB9A1CFE03CF03B4")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UsernameUnique")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Something",
                            Avatar = "avatar.png",
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9078),
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9080),
                            Email = "email@gmail.com",
                            FullName = "Dinh The Vinh",
                            Gender = "Female",
                            ModifiedBy = "2",
                            ModifiedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9071),
                            Password = "password",
                            Phone = "111-111-1111",
                            RoleId = "4463c0cd-ff13-441c-8cd5-5e68961ec70b",
                            Status = false,
                            UserId = "4463c0cdff13441c8cd55e68961ec70b",
                            Username = "dtvin123"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Something",
                            Avatar = "avatar.png",
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9195),
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9196),
                            Email = "email12@gmail.com",
                            FullName = "Nguyen Tan Phat",
                            Gender = "Male",
                            ModifiedBy = "2",
                            ModifiedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9193),
                            Password = "password",
                            Phone = "111-111-1111",
                            RoleId = "4463c0cd-ff13-441c-8cd5-5e68961ec70b",
                            Status = false,
                            UserId = "81e3b0e802f14f51bb685b6e465a45b2",
                            Username = "phatn111"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Something",
                            Avatar = "avatar.png",
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9202),
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9205),
                            Email = "emai22l@gmail.com",
                            FullName = "Hoang DUng",
                            Gender = "Male",
                            ModifiedBy = "2",
                            ModifiedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9201),
                            Password = "password",
                            Phone = "111-111-1111",
                            RoleId = "81e3b0e8-02f1-4f51-bb68-5b6e465a45b2",
                            Status = false,
                            UserId = "e235315151ec41f7907afc1d60f15a6d",
                            Username = "hd2k211"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Something",
                            Avatar = "avatar.png",
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9210),
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9211),
                            Email = "emai23l@gmail.com",
                            FullName = "Tan Phat",
                            Gender = "Male",
                            ModifiedBy = "2",
                            ModifiedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9209),
                            Password = "password",
                            Phone = "111-111-1111",
                            RoleId = "81e3b0e8-02f1-4f51-bb68-5b6e465a45b2",
                            Status = false,
                            UserId = "d915d11d38de42a2b6b39ffebbc5bc1d",
                            Username = "tanphatdd"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Something",
                            Avatar = "avatar.png",
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9216),
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9217),
                            Email = "emai111l@gmail.com",
                            FullName = "Truong Pham",
                            Gender = "Female",
                            ModifiedBy = "2",
                            ModifiedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9215),
                            Password = "password",
                            Phone = "111-111-1111",
                            RoleId = "e2353151-51ec-41f7-907a-fc1d60f15a6d",
                            Status = false,
                            UserId = "99b2bc17dbec476e9a99b34a95dd5b26",
                            Username = "Tpham111"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Something",
                            Avatar = "avatar.png",
                            CreatedBy = "1",
                            CreatedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9222),
                            Dob = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9223),
                            Email = "em444ail@gmail.com",
                            FullName = "Hoang Tri",
                            Gender = "Female",
                            ModifiedBy = "2",
                            ModifiedDate = new DateTime(2024, 3, 2, 17, 33, 27, 903, DateTimeKind.Local).AddTicks(9221),
                            Password = "password",
                            Phone = "111-111-1111",
                            RoleId = "e2353151-51ec-41f7-907a-fc1d60f15a6d",
                            Status = false,
                            UserId = "a3db3e4e0f25445282b2e61a32c582a4",
                            Username = "tien2k2"
                        });
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserPermissionId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("userPermissionId")
                        .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");

                    b.HasKey("Id")
                        .HasName("PK__UserPerm__3214EC071230FE7D");

                    b.HasIndex(new[] { "UserPermissionId" }, "UQ__UserPerm__0E30AD2E4AF9A398")
                        .IsUnique();

                    b.ToTable("UserPermission");
                });

            modelBuilder.Entity("SyllabusTrainingProgram", b =>
                {
                    b.Property<int>("SyllabusId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingProgramCode")
                        .HasColumnType("int");

                    b.HasKey("SyllabusId", "TrainingProgramCode");

                    b.ToTable("SyllabusTrainingProgram");
                });

            modelBuilder.Entity("TrainingProgramSyllabus", b =>
                {
                    b.Property<string>("SyllabusId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("syllabus_id");

                    b.Property<string>("TrainingProgramCode")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("training_program_code");

                    b.HasKey("SyllabusId", "TrainingProgramCode")
                        .HasName("PK__Training__CF42F2E0267126E8");

                    b.HasIndex("TrainingProgramCode");

                    b.ToTable("TrainingProgramSyllabus", (string)null);
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.AssessmentScheme", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Syllabus", "Syllabus")
                        .WithMany("AssessmentSchemes")
                        .HasForeignKey("SyllabusId")
                        .HasPrincipalKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Assessmen__sylla__2EDAF651");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Assignment", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Module", "Module")
                        .WithMany("Assignments")
                        .HasForeignKey("ModuleId")
                        .HasPrincipalKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_Module");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Class", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.AttendeeType", "AttendeeLevel")
                        .WithMany("Classes")
                        .HasForeignKey("AttendeeLevelId")
                        .HasPrincipalKey("AttendeeTypeId")
                        .HasConstraintName("FK_Class_AttendeeType");

                    b.HasOne("ScoreManagementAPI.Models.Fsu", "Fsu")
                        .WithMany("Classes")
                        .HasForeignKey("FsuId")
                        .HasPrincipalKey("FsuId")
                        .HasConstraintName("FK_Class_FSU");

                    b.HasOne("ScoreManagementAPI.Models.Location", "Location")
                        .WithMany("Classes")
                        .HasForeignKey("LocationId")
                        .HasPrincipalKey("LocationId")
                        .HasConstraintName("FK_Class_Location");

                    b.HasOne("ScoreManagementAPI.Models.TrainingProgram", "TrainingProgramCodeNavigation")
                        .WithMany("Classes")
                        .HasForeignKey("TrainingProgramCode")
                        .HasPrincipalKey("TrainingProgramCode")
                        .HasConstraintName("FK_Class_TrainingProgram");

                    b.Navigation("AttendeeLevel");

                    b.Navigation("Fsu");

                    b.Navigation("Location");

                    b.Navigation("TrainingProgramCodeNavigation");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.ClassUser", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Class", "Class")
                        .WithMany("ClassUsers")
                        .HasForeignKey("ClassId")
                        .HasPrincipalKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ClassUser__Class__367C1819");

                    b.HasOne("ScoreManagementAPI.Models.User", "User")
                        .WithMany("ClassUsers")
                        .HasForeignKey("UserId")
                        .HasPrincipalKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ClassUser__UserI__37703C52");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.EmailSend", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.User", "Sender")
                        .WithMany("EmailSends")
                        .HasForeignKey("SenderId")
                        .HasPrincipalKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_EmailSend_Sender");

                    b.HasOne("ScoreManagementAPI.Models.EmailTemplate", "Template")
                        .WithMany("EmailSends")
                        .HasForeignKey("TemplateId")
                        .HasPrincipalKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmailSend_Template");

                    b.Navigation("Sender");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.EmailSendStudent", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.EmailSend", "Email")
                        .WithMany("EmailSendStudents")
                        .HasForeignKey("EmailId")
                        .HasPrincipalKey("EmailSendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmailSendStudent_Email");

                    b.HasOne("ScoreManagementAPI.Models.Student", "Receiver")
                        .WithMany("EmailSendStudents")
                        .HasForeignKey("ReceiverId")
                        .HasPrincipalKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmailSendStudent_Receiver");

                    b.Navigation("Email");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Quiz", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Module", "Module")
                        .WithMany("Quizzes")
                        .HasForeignKey("ModuleId")
                        .HasPrincipalKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Quiz_Module");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.QuizStudent", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Quiz", "Quiz")
                        .WithMany("QuizStudents")
                        .HasForeignKey("QuizId")
                        .HasPrincipalKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_QuizStudent_Quiz");

                    b.HasOne("ScoreManagementAPI.Models.Student", "Student")
                        .WithMany("QuizStudents")
                        .HasForeignKey("StudentId")
                        .HasPrincipalKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_QuizStudent_Student");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.ReservedClass", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Class", "Class")
                        .WithMany("ReservedClasses")
                        .HasForeignKey("ClassId")
                        .HasPrincipalKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReservedClass_Class");

                    b.HasOne("ScoreManagementAPI.Models.Student", "Student")
                        .WithMany("ReservedClasses")
                        .HasForeignKey("StudentId")
                        .HasPrincipalKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ReservedClass_Student");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.RolePermission", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.UserPermission", "Permission")
                        .WithOne("RolePermission")
                        .HasForeignKey("ScoreManagementAPI.Models.RolePermission", "PermissionId")
                        .HasPrincipalKey("ScoreManagementAPI.Models.UserPermission", "UserPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RolePermi__Permi__40F9A68C");

                    b.HasOne("ScoreManagementAPI.Models.Role", "Role")
                        .WithOne("RolePermission")
                        .HasForeignKey("ScoreManagementAPI.Models.RolePermission", "RoleId")
                        .HasPrincipalKey("ScoreManagementAPI.Models.Role", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RolePermi__RoleI__41EDCAC5");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Score", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Assignment", "Assignment")
                        .WithMany("Scores")
                        .HasForeignKey("AssignmentId")
                        .HasPrincipalKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Score_Assignment");

                    b.HasOne("ScoreManagementAPI.Models.Student", "Student")
                        .WithMany("Scores")
                        .HasForeignKey("StudentId")
                        .HasPrincipalKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Score_Student");

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Student", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Major", "Major")
                        .WithMany("Students")
                        .HasForeignKey("MajorId")
                        .HasPrincipalKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Student__MajorId__44CA3770");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.StudentClass", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .HasPrincipalKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentClass_Class");

                    b.HasOne("ScoreManagementAPI.Models.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .HasPrincipalKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentClass_Student");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.StudentModule", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Module", "Module")
                        .WithMany("StudentModules")
                        .HasForeignKey("ModuleId")
                        .HasPrincipalKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentModule_Module");

                    b.HasOne("ScoreManagementAPI.Models.Student", "Student")
                        .WithMany("StudentModules")
                        .HasForeignKey("StudentId")
                        .HasPrincipalKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentModule_Student");

                    b.Navigation("Module");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.SyllabusDay", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Syllabus", "Syllabus")
                        .WithMany("SyllabusDays")
                        .HasForeignKey("SyllabusId")
                        .HasPrincipalKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__SyllabusD__sylla__498EEC8D");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.SyllabusUnit", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.SyllabusDay", "SyllabusDay")
                        .WithMany("SyllabusUnits")
                        .HasForeignKey("SyllabusDayId")
                        .HasPrincipalKey("SyllabusDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__SyllabusU__sylla__4A8310C6");

                    b.Navigation("SyllabusDay");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.TrainingMaterial", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.UnitChapter", "UnitChapter")
                        .WithMany("TrainingMaterials")
                        .HasForeignKey("UnitChapterId")
                        .HasPrincipalKey("UnitChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__TrainingM__unit___4B7734FF");

                    b.Navigation("UnitChapter");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.TrainingProgram", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.TechnicalCode", "TechnicalCode")
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("TechnicalCodeId")
                        .HasPrincipalKey("TechnicalCodeId")
                        .HasConstraintName("FK_TrainingProgram_TechnicalCode");

                    b.HasOne("ScoreManagementAPI.Models.TechnicalGroup", "TechnicalGroup")
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("TechnicalGroupId")
                        .HasPrincipalKey("TechnicalGroupId")
                        .HasConstraintName("FK_TrainingProgram_TechnicalGroup");

                    b.HasOne("ScoreManagementAPI.Models.User", "User")
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("UserId")
                        .HasPrincipalKey("UserId")
                        .HasConstraintName("FK_TrainingProgram_User");

                    b.Navigation("TechnicalCode");

                    b.Navigation("TechnicalGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.TrainingProgramModule", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .HasPrincipalKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrainingProgramModule_Module");

                    b.HasOne("ScoreManagementAPI.Models.TrainingProgram", "Program")
                        .WithOne()
                        .HasForeignKey("ScoreManagementAPI.Models.TrainingProgramModule", "ProgramId")
                        .HasPrincipalKey("ScoreManagementAPI.Models.TrainingProgram", "TrainingProgramCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrainingProgramModule_Program");

                    b.Navigation("Module");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.UnitChapter", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.DeliveryType", "DeliveryType")
                        .WithMany("UnitChapters")
                        .HasForeignKey("DeliveryTypeId")
                        .HasPrincipalKey("DeliveryTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__UnitChapt__deliv__531856C7");

                    b.HasOne("ScoreManagementAPI.Models.OutputStandard", "OutputStandard")
                        .WithMany("UnitChapters")
                        .HasForeignKey("OutputStandardId")
                        .HasPrincipalKey("OutputStandardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__UnitChapt__outpu__540C7B00");

                    b.HasOne("ScoreManagementAPI.Models.SyllabusUnit", "SyllabusUnit")
                        .WithMany("UnitChapters")
                        .HasForeignKey("SyllabusUnitId")
                        .HasPrincipalKey("SyllabusUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__UnitChapt__sylla__55009F39");

                    b.Navigation("DeliveryType");

                    b.Navigation("OutputStandard");

                    b.Navigation("SyllabusUnit");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.User", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasPrincipalKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Users_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TrainingProgramSyllabus", b =>
                {
                    b.HasOne("ScoreManagementAPI.Models.Syllabus", null)
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .HasPrincipalKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TrainingP__sylla__51300E55");

                    b.HasOne("ScoreManagementAPI.Models.TrainingProgram", null)
                        .WithMany()
                        .HasForeignKey("TrainingProgramCode")
                        .HasPrincipalKey("TrainingProgramCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TrainingP__train__5224328E");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Assignment", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.AttendeeType", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Class", b =>
                {
                    b.Navigation("ClassUsers");

                    b.Navigation("ReservedClasses");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.DeliveryType", b =>
                {
                    b.Navigation("UnitChapters");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.EmailSend", b =>
                {
                    b.Navigation("EmailSendStudents");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.EmailTemplate", b =>
                {
                    b.Navigation("EmailSends");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Fsu", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Location", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Major", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Module", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Quizzes");

                    b.Navigation("StudentModules");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.OutputStandard", b =>
                {
                    b.Navigation("UnitChapters");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Quiz", b =>
                {
                    b.Navigation("QuizStudents");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Role", b =>
                {
                    b.Navigation("RolePermission");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Student", b =>
                {
                    b.Navigation("EmailSendStudents");

                    b.Navigation("QuizStudents");

                    b.Navigation("ReservedClasses");

                    b.Navigation("Scores");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudentModules");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.Syllabus", b =>
                {
                    b.Navigation("AssessmentSchemes");

                    b.Navigation("SyllabusDays");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.SyllabusDay", b =>
                {
                    b.Navigation("SyllabusUnits");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.SyllabusUnit", b =>
                {
                    b.Navigation("UnitChapters");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.TechnicalCode", b =>
                {
                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.TechnicalGroup", b =>
                {
                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.TrainingProgram", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.UnitChapter", b =>
                {
                    b.Navigation("TrainingMaterials");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.User", b =>
                {
                    b.Navigation("ClassUsers");

                    b.Navigation("EmailSends");

                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("ScoreManagementAPI.Models.UserPermission", b =>
                {
                    b.Navigation("RolePermission");
                });
#pragma warning restore 612, 618
        }
    }
}
